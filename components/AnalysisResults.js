import { TrendingUp, AlertTriangle, DollarSign, Target, BarChart3, Lightbulb, CheckCircle, Copy, Share2, ExternalLink } from 'lucide-react';
import { useState } from 'react';

export default function AnalysisResults({ analysis }) {
  const [copied, setCopied] = useState(false);

  if (!analysis) {
    return (
      <div className="text-center py-12 text-gray-500">
        <BarChart3 className="w-12 h-12 mx-auto mb-4 opacity-50" />
        <p>Upload a bet slip to see analysis results here</p>
      </div>
    );
  }

  // Handle different response formats from the new API
  const betSlipDetails = analysis.bet_slip_details || analysis.slip_details;
  const extractedBets = analysis.extracted_bets || betSlipDetails?.extracted_bets || [];
  const sportsbookComparison = analysis.sportsbook_comparison;
  const aiOptimization = analysis.ai_optimization;
  const optimization = analysis.optimization || [];
  const confidence = analysis.confidence || analysis.confidence_level;
  const message = analysis.message;
  const errorInfo = analysis.error_info;

  // Handle error states
  if (analysis.error_type === 'vision_parsing_error') {
    return (
      <div className="mt-8 bg-red-50 border border-red-200 rounded-xl p-6">
        <div className="flex items-start gap-3">
          <AlertTriangle className="w-6 h-6 text-red-500 flex-shrink-0 mt-1" />
          <div>
            <h3 className="text-lg font-semibold text-red-800 mb-2">Image Analysis Failed</h3>
            <p className="text-red-700 mb-4">{message}</p>
            {analysis.suggestions && (
              <div>
                <h4 className="font-medium text-red-800 mb-2">Suggestions:</h4>
                <ul className="space-y-1">
                  {analysis.suggestions.map((suggestion, index) => (
                    <li key={index} className="text-red-600 text-sm flex items-start gap-2">
                      <span className="text-red-500 mt-1">‚Ä¢</span>
                      <span>{suggestion}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  const copyResults = async () => {
    const text = `Bet Slip Analysis Results:
    
${extractedBets.map(bet => 
  `‚Ä¢ ${bet.game || `${bet.away_team} vs ${bet.home_team}`}: ${bet.bet_selection || bet.bet} (${bet.odds})`
).join('\n')}

${betSlipDetails ? `
Sportsbook: ${betSlipDetails.sportsbook || 'Unknown'}
Total Stake: ${betSlipDetails.total_stake || 'Not visible'}
Potential Payout: ${betSlipDetails.potential_payout || 'Not visible'}
` : ''}

${message ? `Analysis: ${message}` : ''}

${optimization.length > 0 ? `
Optimization Tips:
${optimization.map(tip => `‚Ä¢ ${tip}`).join('\n')}
` : ''}
    
Generated by AiParlayCalculator`;

    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="mt-8 space-y-8">
      {/* Header */}
      <div className="text-center">
        <div className="inline-flex items-center gap-2 bg-green-100 text-green-800 px-4 py-2 rounded-full text-sm font-medium mb-4">
          <CheckCircle className="w-4 h-4" />
          Analysis Complete
        </div>
        <h2 className="text-2xl font-bold text-gray-800 mb-2">üìä Bet Slip Analysis</h2>
        <p className="text-gray-600">AI-powered optimization with live odds comparison</p>
        {errorInfo && (
          <p className="text-sm text-orange-600 mt-2">‚ö†Ô∏è {errorInfo}</p>
        )}
      </div>

      {/* Current Bet Details */}
      {betSlipDetails && (
        <div className="bg-white border border-gray-200 rounded-xl p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Target className="w-5 h-5 text-blue-600" />
            Current Bet Slip - {betSlipDetails.sportsbook || 'Unknown Sportsbook'}
          </h3>
          
          <div className="grid md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-gray-800">{betSlipDetails.total_odds || 'N/A'}</div>
              <div className="text-sm text-gray-600">Total Odds</div>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{betSlipDetails.total_stake || 'Not visible'}</div>
              <div className="text-sm text-gray-600">Your Stake</div>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">{betSlipDetails.potential_payout || 'Not visible'}</div>
              <div className="text-sm text-gray-600">Potential Payout</div>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{betSlipDetails.bet_type || betSlipDetails.bet_structure || 'Unknown'}</div>
              <div className="text-sm text-gray-600">Bet Type</div>
            </div>
          </div>

          {/* Bet Legs */}
          {extractedBets && extractedBets.length > 0 && (
            <div className="space-y-3">
              <h4 className="font-semibold text-gray-700">Extracted Bets:</h4>
              {extractedBets.map((bet, index) => (
                <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-medium text-gray-800">
                      {bet.game || `${bet.away_team} vs ${bet.home_team}`}
                    </div>
                    <div className="text-blue-600">
                      {bet.bet || bet.bet_selection}
                      {bet.line && ` (${bet.line})`}
                    </div>
                    {bet.sport && (
                      <div className="text-xs text-gray-500 capitalize">{bet.sport}</div>
                    )}
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{bet.odds}</div>
                    {bet.confidence && (
                      <div className="text-sm text-green-600">{bet.confidence}% confidence</div>
                    )}
                    {bet.stake && (
                      <div className="text-sm text-gray-600">{bet.stake}</div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* AI Optimization Analysis */}
      {aiOptimization && (
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Target className="w-5 h-5 text-blue-600" />
            AI Optimization Analysis
          </h3>
          
          {aiOptimization.ev_improvements && aiOptimization.ev_improvements.length > 0 && (
            <div className="mb-4">
              <h4 className="font-semibold text-blue-800 mb-2">üí° EV Improvement Opportunities:</h4>
              <ul className="space-y-1">
                {aiOptimization.ev_improvements.map((improvement, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <span className="text-green-500 mt-1">üöÄ</span>
                    <span className="text-blue-700">{improvement}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {aiOptimization.parlay_weaknesses && aiOptimization.parlay_weaknesses.length > 0 && (
            <div className="mb-4">
              <h4 className="font-semibold text-orange-800 mb-2">‚ö†Ô∏è Parlay Weaknesses Detected:</h4>
              <ul className="space-y-1">
                {aiOptimization.parlay_weaknesses.map((weakness, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <span className="text-orange-500 mt-1">‚ö†Ô∏è</span>
                    <span className="text-orange-700">{weakness}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {aiOptimization.quick_fixes && aiOptimization.quick_fixes.length > 0 && (
            <div className="bg-white p-3 rounded border border-blue-300">
              <h4 className="font-semibold text-green-800 mb-2">üîß Quick Fixes:</h4>
              <ul className="space-y-1">
                {aiOptimization.quick_fixes.map((fix, index) => (
                  <li key={index} className="text-sm text-green-700">‚Ä¢ {fix}</li>
                ))}
              </ul>
            </div>
          )}

          {aiOptimization.optimization_text && (
            <div className="mt-4 p-3 bg-white rounded border border-blue-300">
              <h4 className="font-semibold text-blue-800 mb-2">Detailed Analysis:</h4>
              <div className="text-sm text-blue-700 whitespace-pre-line">{aiOptimization.optimization_text}</div>
            </div>
          )}
        </div>
      )}

      {/* Sportsbook Comparison */}
      {sportsbookComparison && sportsbookComparison.available && (
        <div className="bg-green-50 border border-green-200 rounded-xl p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-green-600" />
            Better Odds Found!
          </h3>
          
          <div className="mb-4">
            <div className="text-green-800 font-bold text-lg">
              {sportsbookComparison.summary?.total_potential_savings} in potential savings
            </div>
            <div className="text-green-700 text-sm">
              {sportsbookComparison.summary?.recommendation}
            </div>
          </div>

          {sportsbookComparison.comparisons && sportsbookComparison.comparisons.length > 0 && (
            <div className="space-y-3">
              {sportsbookComparison.comparisons.slice(0, 3).map((comparison, index) => (
                <div key={index} className="bg-white rounded-lg p-3 border border-green-300">
                  <div className="text-gray-800 font-medium mb-1">{comparison.bet_description}</div>
                  <div className="text-gray-600 text-sm mb-2">
                    Current: {comparison.original_odds} ‚Üí Best: {comparison.current_best_odds || 'N/A'}
                    {comparison.potential_savings > 0 && (
                      <span className="text-green-600 font-medium"> (Save ${comparison.potential_savings?.toFixed(2)})</span>
                    )}
                  </div>
                  {comparison.better_options && comparison.better_options.length > 0 && (
                    <div className="flex gap-2 flex-wrap">
                      {comparison.better_options.slice(0, 2).map((option, i) => (
                        <span key={i} className="bg-green-100 text-green-700 px-2 py-1 rounded text-xs">
                          {option.sportsbook}: {option.odds} ({option.improvement})
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* General Optimization Tips */}
      {optimization && optimization.length > 0 && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Lightbulb className="w-5 h-5 text-yellow-600" />
            Optimization Tips
          </h3>
          <ul className="space-y-2">
            {optimization.map((tip, index) => (
              <li key={index} className="flex items-start gap-2 text-sm">
                <span className="text-yellow-600 mt-1">üí°</span>
                <span className="text-yellow-800">{tip}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Analysis Message */}
      {message && (
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
          <h4 className="text-lg font-semibold text-blue-900 mb-3 flex items-center gap-2">
            <Target className="w-5 h-5" />
            Analysis Summary
          </h4>
          <div className="text-blue-800">{message}</div>
        </div>
      )}

      {/* Confidence Level */}
      {confidence && (
        <div className="bg-gray-50 rounded-xl p-4">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Analysis Confidence:</span>
            <span className={`px-3 py-1 rounded-full text-sm font-medium capitalize ${
              confidence === 'high' ? 'bg-green-100 text-green-800' :
              confidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`}>
              {confidence}
            </span>
          </div>
          {confidence !== 'high' && (
            <p className="text-sm text-gray-600 mt-2">
              For better analysis, try uploading a clearer image with all text clearly visible.
            </p>
          )}
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-3">
        <button
          onClick={copyResults}
          className="flex-1 flex items-center justify-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors"
        >
          {copied ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
          {copied ? 'Copied!' : 'Copy Results'}
        </button>
        
        <button
          onClick={() => {
            if (navigator.share) {
              navigator.share({
                title: 'My Bet Slip Analysis',
                text: `Check out my AI-analyzed bet slip!`,
                url: window.location.href
              });
            }
          }}
          className="flex-1 flex items-center justify-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors"
        >
          <Share2 className="w-4 h-4" />
          Share Analysis
        </button>
      </div>
    </div>
  );
}